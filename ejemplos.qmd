---
title: "Ejemplos"
author: "Borja Andrino"
format: html
editor: visual
---

### Factors

Vamos a hacer este gráfico

![](imgs/ejemplo_1.png)

```{r}

votos_munis <-
  read_csv("data_raw/2022_andalucia_voto_municipios.csv")

colors <- 
  c(PP = "#008BD6", 
    PSOE = "#ED1C24", 
    xA = "#6A2E68", 
    IU = "#A93226", 
    Cs = "#FA5000", 
    VOX =	"#5AC035", 
    AA = "#A3C940")

votos_munis %>% 
  group_by(partido) %>% 
  summarise(votos = sum(votos_partido)) %>% 
  ungroup() %>% 
  mutate(partido = fct_reorder(partido, votos)) %>% 
  ggplot() +  
  geom_col(aes(x = partido, y = votos, fill = partido)) +
  scale_fill_manual(values = colors) +
  coord_flip() + 
  theme_minimal() +
  theme(legend.position = "none")

votos_totales <- 
  votos_munis %>% 
  mutate(election = "2022") %>% 
  group_by(partido, election) %>% 
  summarise(votos = sum(votos_partido)) %>% 
  ungroup() %>% 
  mutate(votos_pc = votos / sum(votos))


votos_totales %>% 
  mutate(partido = fct_relevel(partido, 
                               levels = c("xA", "AA", "PSOE", 
                                          "Otros", "Cs", "PP", "VOX")) %>% 
           fct_rev()) %>% 
  ggplot() +  
  geom_bar(aes(x = election, 
               y = votos_pc, 
               fill = partido), 
           position = position_stack(), stat = "identity") +
  geom_hline(yintercept = 0.5) + 
  scale_fill_manual(values = colors) +
  scale_y_continuous(breaks = c(0.5), 
                     labels = scales::percent) +
  coord_flip() + 
  theme_minimal() +
  theme(legend.position = "none")

```

### Tratamiento cadenas texto

```{r}

data_raw <- 
  tribble(~id, ~calificacion, 
          "2022_pepe_jimenez_2023", 7,
          "1963_eva_maria_se_fue", 9)

```

Vamos a separar el año y el nombre en esta base de datos de alumnos

```{r}

data_raw %>% 
  mutate(year = str_sub(id, 1, 4), 
         year_regexp = str_extract(id, "^\\d{4}"),
         name = str_sub(id, 5, -1), 
         name_2 = str_remove_all(name, year), 
         name = str_replace_all(name, "_", " "), 
         name = str_trim(name), 
         name = str_to_title(name))

```

Ahora algo más complejo. Vamos a estandarizar estos nombres de municipios.

```{r}

dict_codigos <- 
  tribble(~codigo_mun, ~mun, 
          00001, "Palmas, Las", 
          00002, "Alicante/Alacant")

```

```{r}

dict_codigos %>% 
  mutate(preffix = str_extract(mun, ",\\s*\\w+"),
         principal = str_remove_all(mun, preffix),
         preffix = str_remove_all(preffix, "[,\\s]"),
         mun_recoded = str_glue("{preffix} {principal}")) %>% 
  View()

dict_codigos %>% 
  mutate(preffix = str_extract(mun, ",\\s*\\w+"),
         principal = str_remove_all(mun, preffix),
         preffix = str_remove_all(preffix, "[,\\s]"), 
         mun_recoded = 
           case_when(
             str_detect(mun, ",") ~ str_glue("{preffix} {principal}"), 
             str_detect(mun, "/") ~ str_remove_all(mun, "/\\w+"), 
             T ~ mun)) %>% 
  View()


```

### Joins

```{r}
require(tidyverse)

munis <- tribble(~mun, ~ccaa,
                 "Madrid", "Madrid",
                 "Barcelona", "Cataluña",
                 "Valencia", "C. Valenciana")

censo <- tribble(~mun, ~censo,
                 "Madrid", "3.2",
                 "Barcelona", "1.6",
                 "Alicante", "0.8")

munis 
censo 

```

### Fechas

¿Por qué son importantes?

```{r}

library(lubridate) 

to_plot <- tribble(~partido, ~date, ~votes_pc, 
                   "PP", "2019-11-10", 24,
                   "PP", "2022-02-10", 19,
                   "PP", "2023-04-16", 28,
                   "PSOE", "2019-11-10", 28,
                   "PSOE", "2022-02-10", 30,
                   "PSOE", "2023-04-16", 25)

to_plot %>% 
  ggplot() + 
  geom_line(aes(x = date, y = votes_pc, group = partido, color = partido)) + 
  geom_point(aes(x = date, y = votes_pc, color = partido)) + 
  scale_color_manual(values = colors) +
  theme_minimal() +
  theme(legend.position = "none")


```

```{r}

to_plot <- tribble(~partido, ~date, ~votes_pc, 
                   "PP", "2019-11-10", 24,
                   "PP", "2022-02-10", 19,
                   "PP", "2023-04-16", 28,
                   "PSOE", "2019-11-10", 28,
                   "PSOE", "2022-02-10", 30,
                   "PSOE", "2023-04-16", 25) %>% 
  mutate(date = ymd(date))

date_breaks <- 
  to_plot %>% 
  distinct(date) %>% 
  pull(date)

to_plot %>% 
  ggplot() + 
  geom_line(aes(x = date, y = votes_pc, group = partido, color = partido)) + 
  geom_point(aes(x = date, y = votes_pc, color = partido)) + 
  scale_color_manual(values = colors) +
  scale_x_date(breaks = date_breaks, 
               date_labels = "%b %y") + 
  scale_y_continuous(limits = c(0, 50)) + 
  theme_minimal() +
  theme(legend.position = "none")

```

### Left join

```{r}

munis %>%
  left_join(censo, by = "mun")

```

### Right join

```{r}

munis %>%
  right_join(censo)

```

### Full join

```{r}

munis %>%
  full_join(censo)

```

### Inner join

```{r}

munis %>%
  inner_join(censo)

```

### Anti join

```{r}

munis %>%
  anti_join(censo)

```

### ¿Las claves se llaman distinto?

```{r}

datos <- tribble(~municipio, ~A, ~B, ~C,
                 "Madrid", "Sí", 3.2, 1,
                 "Barcelona", "No", 1.3, 2,
                 "Alicante", "No", 2, NA)

munis %>%
  rename(municipio = mun) %>% 
  left_join(datos)

munis %>%
  left_join(datos, by = c("mun" = "municipio"))

```

### ¿Sufijos?

```{r}

est_mujeres <- tribble( ~universidad, ~estudiantes, 
                        "UC3M", 18000, 
                        "UAM", 1800)

est_hombres <- tribble( ~universidad, ~estudiantes, 
                        "UC3M", 1000, 
                        "UAM", 18000 )

est_mujeres
est_hombres

```

```{r}
est_mujeres %>%
  inner_join( est_hombres,
              by = "universidad",
              suffix = c( "_mujeres", "_hombres"))

```

## Función

```{r}

library(tidyverse)

add_3 <- function(any_number = -3){
  
  new_number <- any_number + 3
  return(new_number)
  
}

add_3 <- function(any_number = -3){
  output <- any_number + 3
  output
}


add_3(5)

mi_division <- function(numerador, denominador){
  
  output <- numerador / denominador
  
  output %>% 
    round(2)
  
}

mi_division(8, 4)


x <- tibble(x1 = runif(1000, 0, 100), x2 = runif(1000, 0, 10))


x %>% 
  mutate(x1_div_x2 = mi_division(x1, x2)) 

```

```{r}

url <- 
  "https://cnecovid.isciii.es/covid19/resources/casos_hosp_uci_def_sexo_edad_provres.csv"

data_raw <- 
  read_csv(url, na = "")

prepare_totales <- function(p_data){
  
  p_data %>% 
    summarise(num_casos = sum(num_casos, na.rm = T)) %>% 
    pull(num_casos)
  
  
}


prepare_totales_prov <- function(p_data){
  
  
  p_data %>% 
    group_by(provincia_iso) %>% 
    summarise(across(starts_with("num_"),
                     ~ sum(., na.rm = T))) %>% 
    ungroup()
  
  
}


prepare_totales_prov <- function(p_data){
  
  p_data %>% 
    pivot_longer(starts_with("num_"), 
                 names_to = "indicador", 
                 values_to = "valor") %>% 
    group_by(provincia_iso, indicador) %>% 
    summarise(valor = sum(valor)) %>% 
    ungroup() %>% 
    pivot_wider(id_cols = provincia_iso, 
                names_from = indicador, 
                values_from  = valor)
  
}

prepare_totales(data_raw)


datos_provs <- prepare_totales_prov(data_raw)


to_plot <- 
  datos_provs_filtered <- 
  datos_provs
rm(data_raw)
gc()

```

Mapas
```{r}

library(tidyverse)
library(sf)


map_munis <- read_sf("https://raw.githubusercontent.com/LuisSevillano/spanish-topojson-files/master/with-names/municipalities.json")
map_munis <- read_sf("data/map_munis.geojson")

datos_elecciones_raw <- 
  read_csv("data_raw/2022_andalucia_voto_municipios.csv") 


# estrategia 1
datos_elecciones_pc <- 
  datos_elecciones_raw %>% 
  pivot_wider(id_cols = c(codigo_mun, mun, part),
              names_from = partido, 
              values_from = votos_pc)

datos_elecciones_abs <- 
  datos_elecciones_raw %>% 
  pivot_wider(id_cols = c(codigo_mun, mun, part),
              names_from = partido, 
              values_from = votos_partido)

datos_elecciones <- 
  datos_elecciones_abs %>%
  left_join(datos_elecciones_pc, 
            by = c("codigo_mun", "mun", "part"), 
            suffix = c("_abs", "_pc"))


# estrategia 2
datos_elecciones <- 
  datos_elecciones_raw %>% 
  rename(abs = votos_partido, pc = votos_pc) %>% 
  pivot_wider(id_cols = c(codigo_mun, mun, part), 
              names_from = partido, 
              values_from = c(abs, pc), 
              names_glue = "{str_remove(.name, paste0(.value, '_'))}_{.value}")


map_munis_w_votes <- 
  map_munis %>% 
  inner_join(datos_elecciones, 
             by = c("id" = "codigo_mun"))

map_munis %>% 
  inner_join(datos_elecciones_raw,
             by = c("id" = "codigo_mun")) %>% 
  ggplot() + 
  geom_sf(aes(fill = partido, 
              alpha = votos_pc/100), 
          color = "white", size = 0.1) + 
  facet_wrap(~partido) + 
  theme_minimal()

st_write(map_munis_w_votes, "data/map_munis_w_votes.geojson")



```


Bucles que no tenemos que usar
```{r}
x <- c(1, 2, 3, 4)

for (i in seq(1, length(x))){
  print(paste("Estoy ejecutando el bucle con i = ", i))
  x[i] <- x[i] + 10
}


flag <- T
i <- 0
while (flag == TRUE) {
  
  new_number <- runif(1, 0, 100)
  
  flag <- if_else(new_number > 50, 
                  FALSE, 
                  TRUE)
  
  i <- i + 1  
}

i 

```


Vamos a probar los map y el walk
```{r}

library(tidyverse)
v <- c(1, 2, 3, 4, 5, 6)

my_square <- function(p1){
  p1^2  
} 

output <- map(v, my_square)
class(output)

output2 <- map_dbl(v, my_square)
class(output2)

```

```{r}
#| echo: false
#| message: false
#| warning: false

prepare_cummulative_prov <- function(p_data){
  
  p_data %>% 
    pivot_longer(starts_with("num_"), 
                 names_to = "indicador", 
                 values_to = "valor") %>% 
    group_by(fecha, provincia_iso, indicador) %>% 
    summarise(valor = sum(valor)) %>% 
    ungroup() %>% 
    group_by(provincia_iso, indicador) %>%
    arrange(fecha) %>% 
    replace_na(list(valor = 0)) %>% 
    mutate(valor = cumsum(valor)) %>% 
    ungroup() %>%
    pivot_wider(id_cols = c(provincia_iso, fecha),
                names_from = indicador,
                values_from  = valor)  
}

url <- 
  "https://cnecovid.isciii.es/covid19/resources/casos_hosp_uci_def_sexo_edad_provres.csv"

data_all <- 
  read_csv(url, na = "") %>% 
  prepare_cummulative_prov() 


write_provs <- function(p_provincia_iso){
  
  file_name <- 
    str_glue("data/data_provs/{str_to_lower(p_provincia_iso)}.csv")
  
  data_all %>% 
    filter(provincia_iso == p_provincia_iso) %>% 
    write_csv(file_name)
  
  
}

t0 <- Sys.time()
data_all %>% 
  distinct(provincia_iso) %>% 
  pull(provincia_iso) %>% 
  walk(write_provs)
Sys.time() - t0

library(fs)

# paths <- dir_ls("data/data_provs", regexp = "/a.*\\.csv")
paths <- dir_ls("data/data_provs")

data_all_mapped <- map(paths, read_csv)

```


```{r}
#| echo: false
#| message: false
#| warning: false
#| error: true

data_all_mapped <- map_df(paths, 
                          read_csv, 
                          col_types = "cDnnnn")


```

¿Qué tengo que pensar antes de hacer un map?
```{r}

map_df(sobre_algo, haciendo_esto_otro)

sobre_algo

diseño haciendo_esto_otro con sobre_algo[1]

```



Web scraping
```{r}
#| echo: true
#| message: false
#| warning: false

library(rvest)

page_html <- read_html("https://datos.madrid.es/sites/v/index.jsp?vgnextoid=fa677996afc6f510VgnVCM1000001d4a900aRCRD&vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD")

class(page_html)

links <- 
  page_html %>% 
  html_nodes("a.ico-csv") %>% 
  html_attr("href") %>% 
  paste0("https://datos.madrid.es", .)



my_reader <- function(p_path){
  
  print(p_path)
  
  out <- tryCatch({
    read_csv2(p_path)
  },
  error=function(cond) {
    read_csv2(p_path, locale = locale(encoding = "windows-1252"))
  }
  )    
  
  return(out)
  
}

all_data <- 
  map_df(links, my_reader)

```


```{r}

year_parser <- function(p_li){
  
  title <- 
    p_li %>% 
    html_nodes("p.info-title") %>% 
    html_text()
  
  info <- 
    p_li %>% 
    html_nodes("span.info-file") %>% 
    html_text()
  
  urls <- 
    p_li %>% 
    html_nodes("a") %>% 
    html_attr("href")
  
  year_info <- 
    tibble(title, urls, info) %>% 
    separate(info, into = c("ext", "rest_info"), sep = ",") %>% 
    separate(rest_info, into = c("size", "downloads"), sep = " - ") %>% 
    mutate(ext = str_to_lower(ext),
           downloads = downloads %>% 
             str_remove_all(" descargas") %>% 
             str_remove_all("\\.") %>% 
             as.numeric())
  
  year_info
  
}


all_years_info <- 
  page_html %>% 
  html_nodes(xpath = '//*[@id="readspeaker"]/div[3]/div/div[1]/ul') %>% 
  html_children()


info_years <- map_df(all_years_info, year_parser)

```

